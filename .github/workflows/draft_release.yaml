name: Create Draft Release

on:
  push:
    tags:
    - 'v*'

jobs:
  draft_release:
    name: Create Draft Release
    runs-on: ubuntu-latest
    steps:
      # - name: Set env
      #   run:  echo "RELEASE_TAG=${GITHUB_REF:10}" >> $GITHUB_ENV
      - name: Checkout the Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: '^1.18'
      # - name: generate release notes
      #   run: |
      #     make release-notes
      - name: Create Release Artifacts
        run: |
          make release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: out/*.*
          # body_path: _releasenotes/${{ env.RELEASE_TAG }}.md

  release_image:
    name: Build and Push Release Image
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: '^1.18'
      
      - name: Create Licenses Report
        run: |
          make licenses-report
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract Metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4.1.1
        with:
          images: ghcr.io/telekom/cluster-api-ipam-provider-in-cluster
      
      - name: Get Version Information
        id: version_info
        run: |
          echo "LDFLAGS=$(hack/version.sh)" >> $GITHUB_OUTPUT

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v3.3.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            ldflags=${{ steps.version_info.outputs.LDFLAGS }}
