version: "2"
run:
  go: "1.23"
  build-tags:
    - e2e
  allow-parallel-runners: true

linters:
  default: none
  enable:
    - asasalint
    - asciicheck
    - bidichk
    - bodyclose
    - containedctx
    - copyloopvar
    - dogsled
    - dupword
    - durationcheck
    - errcheck
    - errchkjson
    - ginkgolinter
    - goconst
    - gocritic
    - godot
    - goprintffuncname
    - gosec
    - govet
    - importas
    - ineffassign
    - intrange
    - loggercheck
    - misspell
    - nakedret
    - nilerr
    - noctx
    - nolintlint
    - nosprintfhostport
    - prealloc
    - predeclared
    - revive
    - rowserrcheck
    - staticcheck
    - thelper
    - unconvert
    - unparam
    - unused
    - usestdlibvars
    - usetesting
    - whitespace
  settings:
    ginkgolinter:
      forbid-focus-container: true
    gocritic:
      disabled-checks:
        - appendAssign
        - dupImport  # https://github.com/go-critic/go-critic/issues/845
        - evalOrder
        - ifElseChain
        - octalLiteral
        - regexpSimplify
        - sloppyReassign
        - truncateCmp
        - typeDefFirst
        - unnamedResult
        - unnecessaryDefer
        - whyNoLint
        - wrapperFunc
      enabled-tags:
        - experimental
    godot:
      #   declarations - for top level declaration comments (default);
      #   toplevel     - for top level comments;
      #   all          - for all comments.
      scope: toplevel
      exclude:
        - ^ \+.*
        - ^ ANCHOR.*
    importas:
      alias:
        # Kubernetes
        - pkg: k8s.io/api/core/v1
          alias: corev1
        - pkg: k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1
          alias: apiextensionsv1
        - pkg: k8s.io/apimachinery/pkg/apis/meta/v1
          alias: metav1
        - pkg: k8s.io/apimachinery/pkg/api/errors
          alias: apierrors
        - pkg: k8s.io/apimachinery/pkg/util/errors
          alias: kerrors
        # Controller Runtime
        - pkg: sigs.k8s.io/controller-runtime
          alias: ctrl
        # CAPI
        - pkg: sigs.k8s.io/cluster-api/api/v1alpha3
          alias: clusterv1alpha3
        - pkg: sigs.k8s.io/cluster-api/api/v1alpha4
          alias: clusterv1alpha4
        - pkg: sigs.k8s.io/cluster-api/api/v1beta1
          alias: clusterv1
        # CAPI exp IPAM
        - pkg: sigs.k8s.io/cluster-api/exp/ipamapi/v1alpha1
          alias: ipamv1
      no-unaliased: true
    nolintlint:
      require-specific: true
      allow-unused: false
    revive:
      rules:
        # The following rules are recommended https://github.com/mgechev/revive#recommended-configuration
        - name: blank-imports
        - name: context-as-argument
        - name: context-keys-type
        - name: dot-imports
        - name: error-return
        - name: error-strings
        - name: error-naming
        - name: exported
        - name: if-return
        - name: increment-decrement
        - name: var-naming
        - name: var-declaration
        - name: package-comments
        - name: range
        - name: receiver-naming
        - name: time-naming
        - name: unexported-return
        - name: indent-error-flow
        - name: errorf
        - name: empty-block
        - name: superfluous-else
        - name: unused-parameter
        - name: unreachable-code
        - name: redefines-builtin-id
        #
        # Rules in addition to the recommended configuration above.
        #
        - name: bool-literal-in-expr
        - name: constant-logical-expr

  exclusions:
    generated: lax
    rules:
      - linters:
          - revive
        text: 'exported: exported method .*\.(Reconcile|SetupWithManager|SetupWebhookWithManager) should have comment or be unexported'
      - linters:
          - errcheck
        text: Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*print(f|ln)?|os\.(Un)?Setenv). is not checked
      # Exclude some packages or code to require comments, for example test code, or fake clients.
      - linters:
          - revive
        text: exported (method|function|type|const) (.+) should have comment or be unexported
        source: (func|type).*Fake.*
      - linters:
          - revive
        path: fake_\.go
        text: exported (method|function|type|const) (.+) should have comment or be unexported
      - linters:
          - revive
        path: cmd/clusterctl/internal/test/providers.*.go
        text: exported (method|function|type|const) (.+) should have comment or be unexported
      - linters:
          - revive
        path: (framework|e2e)/.*.go
        text: exported (method|function|type|const) (.+) should have comment or be unexported
      # Disable unparam "always receives" which might not be really
      # useful when building libraries.
      - linters:
          - unparam
        text: always receives
      # Dot imports for gomega and ginkgo are allowed
      # within test files and test utils.
      - linters:
          - revive
          - staticcheck
        path: _test\.go
        text: should not use dot imports
      # Append should be able to assign to a different var/slice.
      - linters:
          - gocritic
        text: 'appendAssign: append result not assigned to the same slice'
      # Disable linters for conversion
      - linters:
          - staticcheck
        path: .*(api|types)\/.*\/conversion.*\.go$
        text: 'SA1019: in.(.+) is deprecated'
      - linters:
          - revive
        # Ignoring stylistic checks for generated code
        path: .*(api|types|test)\/.*\/conversion.*\.go$
        # Checking if an error is nil to just after return the error or nil is redundant
        text: 'if-return: redundant if ...; err != nil check, just return error instead'
      - linters:
          - revive
        # Ignoring stylistic checks for generated code
        path: .*(api|types|test)\/.*\/conversion.*\.go$
        # Exported function and methods should have comments. This warns on undocumented exported functions and methods.
        text: exported (method|function|type|const) (.+) should have comment or be unexported
      - linters:
          - revive
        # Ignoring stylistic checks for generated code
        path: .*(api|types|test)\/.*\/conversion.*\.go$
        # This rule warns when initialism, variable or package naming conventions are not followed.
        text: 'var-naming: don''t use underscores in Go names;'
      - linters:
          - revive
        # Ignoring stylistic checks for generated code
        path: .*(api|types)\/.*\/conversion.*\.go$
        # By convention, receiver names in a method should reflect their identity.
        text: 'receiver-naming: receiver name'
      - linters:
          - staticcheck
        path: .*(api|types|test)\/.*\/conversion.*\.go$
        text: 'ST1003: should not use underscores in Go names;'
      - linters:
          - staticcheck
        path: .*(api|types)\/.*\/conversion.*\.go$
        text: 'ST1016: methods on the same type should have the same receiver name'
      # We don't care about defer in for loops in test files.
      - linters:
          - gocritic
        path: _test\.go
        text: 'deferInLoop: Possible resource leak, ''defer'' is called in the ''for'' loop'
      - linters:
          - goconst
        path: (.+)_test\.go
    paths:
      - zz_generated.*\.go$
      - vendored_openapi\.go$
      - api/.*/conversion\.go$
      - third_party
      - third_party$
      - builtin$
      - examples$

issues:
  max-issues-per-linter: 0
  max-same-issues: 0

formatters:
  enable:
    - gci
    - gofmt
    - goimports
  settings:
    gci:
      sections:
        - standard
        - default
        - prefix(sigs.k8s.io/cluster-api-ipam-provider-in-cluster)
      custom-order: true
  exclusions:
    generated: lax
    paths:
      - zz_generated.*\.go$
      - vendored_openapi\.go$
      - api/.*/conversion\.go$
      - third_party
      - third_party$
      - builtin$
      - examples$
