run:
  timeout: 10m
  go: "1.22"
  build-tags:
    - e2e
  allow-parallel-runners: true

linters:
  disable-all: true
  enable:
    - asasalint
    - asciicheck
    - bidichk
    - bodyclose
    - containedctx
    - copyloopvar
    - dogsled
    - dupword
    - durationcheck
    - errcheck
    - errchkjson
    - gci
    - ginkgolinter
    - goconst
    - gocritic
    - godot
    - gofmt
    - goimports
    - goprintffuncname
    - gosec
    - gosimple
    - govet
    - importas
    - ineffassign
    - intrange
    - loggercheck
    - misspell
    - nakedret
    - nilerr
    - noctx
    - nolintlint
    - nosprintfhostport
    - prealloc
    - predeclared
    - revive
    - rowserrcheck
    - staticcheck
    - stylecheck
    - thelper
    - typecheck
    - unconvert
    - unparam
    - unused
    - usestdlibvars
    - usetesting
    - whitespace

linters-settings:
  godot:
    #   declarations - for top level declaration comments (default);
    #   toplevel     - for top level comments;
    #   all          - for all comments.
    scope: toplevel
    exclude:
    - '^ \+.*'
    - '^ ANCHOR.*'
  gci:
    sections:
      - standard
      - default
      - 'prefix(sigs.k8s.io/cluster-api-ipam-provider-in-cluster)'
    custom-order: true
  ginkgolinter:
    forbid-focus-container: true
  gocritic:
    enabled-tags:
      - experimental
    disabled-checks:
      - appendAssign
      - dupImport # https://github.com/go-critic/go-critic/issues/845
      - evalOrder
      - ifElseChain
      - octalLiteral
      - regexpSimplify
      - sloppyReassign
      - truncateCmp
      - typeDefFirst
      - unnamedResult
      - unnecessaryDefer
      - whyNoLint
      - wrapperFunc
  importas:
    no-unaliased: true
    alias:
      # Kubernetes
      - pkg: k8s.io/api/core/v1
        alias: corev1
      - pkg: k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1
        alias: apiextensionsv1
      - pkg: k8s.io/apimachinery/pkg/apis/meta/v1
        alias: metav1
      - pkg: k8s.io/apimachinery/pkg/api/errors
        alias: apierrors
      - pkg: k8s.io/apimachinery/pkg/util/errors
        alias: kerrors
      # Controller Runtime
      - pkg: sigs.k8s.io/controller-runtime
        alias: ctrl
      # CAPI
      - pkg: sigs.k8s.io/cluster-api/api/v1alpha3
        alias: clusterv1alpha3
      - pkg: sigs.k8s.io/cluster-api/api/v1alpha4
        alias: clusterv1alpha4
      - pkg: sigs.k8s.io/cluster-api/api/v1beta1
        alias: clusterv1
      # CAPI exp IPAM
      - pkg: sigs.k8s.io/cluster-api/exp/ipamapi/v1alpha1
        alias: ipamv1
  nolintlint:
    allow-unused: false
    require-specific: true
  revive:
    rules:
      # The following rules are recommended https://github.com/mgechev/revive#recommended-configuration
      - name: blank-imports
      - name: context-as-argument
      - name: context-keys-type
      - name: dot-imports
      - name: error-return
      - name: error-strings
      - name: error-naming
      - name: exported
      - name: if-return
      - name: increment-decrement
      - name: var-naming
      - name: var-declaration
      - name: package-comments
      - name: range
      - name: receiver-naming
      - name: time-naming
      - name: unexported-return
      - name: indent-error-flow
      - name: errorf
      - name: empty-block
      - name: superfluous-else
      - name: unused-parameter
      - name: unreachable-code
      - name: redefines-builtin-id
      #
      # Rules in addition to the recommended configuration above.
      #
      - name: bool-literal-in-expr
      - name: constant-logical-expr
#  gosec:
#    excludes:
#    - G307 # Deferring unsafe method "Close" on type "\*os.File"
#    - G108 # Profiling endpoint is automatically exposed on /debug/pprof
  goconst:
    ignore-tests: true
issues:
  max-same-issues: 0
  max-issues-per-linter: 0

  exclude-files:
    - "zz_generated.*\\.go$"
    - "vendored_openapi\\.go$"
    - "api/.*/conversion\\.go$"
  exclude-dirs:
    - third_party

  # We are disabling default golangci exclusions because we want to help reviewers to focus on reviewing the most relevant
  # changes in PRs and avoid nitpicking.
  exclude-use-default: false
  exclude-rules:
    - linters:
        - revive
      text: "exported: exported method .*\\.(Reconcile|SetupWithManager|SetupWebhookWithManager) should have comment or be unexported"
    - linters:
        - errcheck
      text: Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*print(f|ln)?|os\.(Un)?Setenv). is not checked
    # Exclude some packages or code to require comments, for example test code, or fake clients.
    - linters:
        - revive
      text: exported (method|function|type|const) (.+) should have comment or be unexported
      source: (func|type).*Fake.*
    - linters:
        - revive
      text: exported (method|function|type|const) (.+) should have comment or be unexported
      path: fake_\.go
    - linters:
        - revive
      text: exported (method|function|type|const) (.+) should have comment or be unexported
      path: cmd/clusterctl/internal/test/providers.*.go
    - linters:
        - revive
      text: exported (method|function|type|const) (.+) should have comment or be unexported
      path: "(framework|e2e)/.*.go"
    # Disable unparam "always receives" which might not be really
    # useful when building libraries.
    - linters:
        - unparam
      text: always receives
    # Dot imports for gomega and ginkgo are allowed
    # within test files and test utils.
    - linters:
        - revive
        - stylecheck
      path: _test\.go
      text: should not use dot imports
    # Append should be able to assign to a different var/slice.
    - linters:
        - gocritic
      text: "appendAssign: append result not assigned to the same slice"
    # Disable linters for conversion
    - linters:
        - staticcheck
      text: "SA1019: in.(.+) is deprecated"
      path: .*(api|types)\/.*\/conversion.*\.go$
    - linters:
        - revive
      # Checking if an error is nil to just after return the error or nil is redundant
      text: "if-return: redundant if ...; err != nil check, just return error instead"
      # Ignoring stylistic checks for generated code
      path: .*(api|types|test)\/.*\/conversion.*\.go$
    - linters:
        - revive
      # Exported function and methods should have comments. This warns on undocumented exported functions and methods.
      text: exported (method|function|type|const) (.+) should have comment or be unexported
      # Ignoring stylistic checks for generated code
      path: .*(api|types|test)\/.*\/conversion.*\.go$
    - linters:
        - revive
      # This rule warns when initialism, variable or package naming conventions are not followed.
      text: "var-naming: don't use underscores in Go names;"
      # Ignoring stylistic checks for generated code
      path: .*(api|types|test)\/.*\/conversion.*\.go$
    - linters:
        - revive
      # By convention, receiver names in a method should reflect their identity.
      text: "receiver-naming: receiver name"
      # Ignoring stylistic checks for generated code
      path: .*(api|types)\/.*\/conversion.*\.go$
    - linters:
        - stylecheck
      text: "ST1003: should not use underscores in Go names;"
      path: .*(api|types|test)\/.*\/conversion.*\.go$
    - linters:
        - stylecheck
      text: "ST1016: methods on the same type should have the same receiver name"
      path: .*(api|types)\/.*\/conversion.*\.go$
    # We don't care about defer in for loops in test files.
    - linters:
        - gocritic
      text: "deferInLoop: Possible resource leak, 'defer' is called in the 'for' loop"
      path: _test\.go